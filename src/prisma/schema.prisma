// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  USER
  ADMIN
}

enum FileStatus {
  ACTIVE
  FLAGGED
  UNSAFE
}

enum ReviewVerdict {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  password  String
  role      RoleType @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folders Folder[]
  files File[]
  adminReviews    FileReview[] @relation("AdminReviews")
}

model Folder {
  id        String    @id @default(uuid())
  name      String
  userId    String
  parentId  String?   // optional parent folder (self-relation)
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]  @relation("FolderHierarchy")
  files     File[]
}

model File {
  id          String           @id @default(uuid())
  userId      String
  folderId    String?
  fileName    String
  contentType String?
  size        BigInt
  reviews     FileReview[]
  s3Key       String      @unique
  status      FileStatus  @default(ACTIVE)
  isFlagged   Boolean     @default(false)
  flaggedBy   String?     
  isDeleted   Boolean     @default(false)
  deletedBy   String?
  deletedAt   DateTime?

  user        User          @relation(fields: [userId], references: [id])
  folder      Folder?       @relation(fields: [folderId], references: [id]) 
  createdAt   DateTime      @default(now())
}

model FileReview {
  id          String        @id @default(uuid())
  fileId      String
  file        File          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  adminId     String
  admin       User          @relation("AdminReviews", fields: [adminId], references: [id])
  
  verdict     ReviewVerdict @default(PENDING)
  reason      String?
  notes       String?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([fileId])
  @@index([adminId])
  @@index([verdict])
}
